데이터베이스 : 체계적인 데이터 모음
데이터 : 저장이나 처리에 효율적인 형태로 변환된 정보

데이터를 저장하고 잘 관리하여 활용할 수 있는 기술 중요성 증가

기존의 데이터 저장 -> 1. 파일, 2. 스프레드 시트 이용
1. 파일 : 어디에나 쉽게 사용 가능하나, 구조적 관리 어려움
2. 스프레드 시트(표) : 테이블의 열과 행을 사용해 구조적 관리 가능, 크기가 100만 행까지만 저장가능, 보안에서 한계점, 정확성이 떨어짐(오타 하나 나면 해당 값을 업뎃해야함 여러 시트에 분산되어 있다면 변경에 누락이나 추가 문제 발생 가능)

데이터베이스 역할 : 데이터를 저장하고 조작

관계형 데이터베이스 : 데이터 간에 관계가 있는 데이터 항목들의 모음
서로 관련된 데이터 포인터를 저장하고 이에 대한 엑세스를 제공(주문 테이블 <-> 고객 테이블)
관계 : 여러 테이블 간의 (논리적)연결
관계로 할 수 있는 것 : 데이터를 다양한 형식으로 조회 가능 -> 특정 날짜에 구매한 모든 고객 조회, 지난 달에 배송일이 지연된 고객 조회 등등 

관계형 데이터베이스 관련 키워드 6개
1. Table(aka Realation) :  데이터를 기록하는 곳
2. Field(aka Column, Attribute) : 각 필드에는 고유한 데이터 형식(타입)이 지정됨
3. Record(aka Row, Tuple) : 각 레코드에는 구체적인 데이터 값이 저장됨
4. Database(aka Schema) : 테이블의 집합
5. Priamry Key(기본 키, PK) : 각 레코드의 고유한 값, 관계형 데이터베이스에서 레코드의 식별자로 활용
6. Foreign Key(외래 키, FK) : 테이블의 필드 중 다른 테이블의 레코드를 식별할 수 있는 키, 다른 테이블의 기본 키를 참조, 각 레코드에서 서로 다른 테이블 간의 관계를 만드는 데 사용 

DBMS(Database Management System) : 데이터베이스를 관리하는 소프트웨어 프로그램 
RDBMS(Relational Database Management System) : 관계형 데이터베이스를 관리하는 소프트웨어 프로그램 
DBMS : 데이터 저장 및 관리를 용이하게 하는 시스템

RDBMS 서비스 종류 : SQLite, MySOL, Oracle Database 
SQLite : 경량의 오픈 소스 데이터베이스 관리 시스템(컴퓨터나 모바일 기기에 내장)

SQL(Structure Query Language) : 데이터베이스에 정보를 저장하고 처리하기 위한 프로그래밍 언어(데이버베이스와 소통을 하는 언어), 테이블의 형태로 구조화된 관계형 데이터베이스에게 요청을 질의(요청), (질의 : Query)

SQL Syntax 
SELECT column_name FROM table_name;
1. SQL 키워드는 대소문자를 구분하지 않음, 하지만 대문자로 작성하는 것을 권장(명시적 구분)
2. 각 SQL Statemnets의 끝에는 세미콜론(';')이 필요, 세미콜론은 각 SQL Statements을 구분하는 방법(명령어의 마침표) 

SQL Statements : SQL을 구성하는 가장 기본적인 코드 블록
SQL Statements 예시
SELECT column_name FROM table_name;
- 해당 예시 코드는 SELECT Statement라 부름
- 이 Statement는 SELECT, FROM 2개의 keyword로 구성 됨 

수행 목적에 따른 SQL Statements 4가지 유형
1. DDL(데이터 정의) : Deginition, 데이터의 기본 구조 및 형식 변경, SQL 키워드 : CREATE, DROP, ALTER
2. DQL(데이터 검색) : Query, 데이터 검색, SQL 키워드 : SELECT
3. DML(데이터 조작) : Manipulation, 데이터 조작(추가, 수정, 삭제), SQL 키워드 : INSERT, UPDATE, DELETE
4. DCL(데이터 제어) : Control, 데이터 및 작업에 대한 사용자 권한 제어, SQL 키워드 : COMMIT, ROLLBACK, GRANT, REVOKE

SQL 학습 : 단순히 SQL 문법을 암기하고 상황에 따라 실행만 하는 것이 아닌 SQL을 통해 관계형 데이터베이스를 잘 이해하고 다루는 방법을 학습 

참고) 
Query : 데이터베이스로부터 정보를 요청 하는 것, 일반적으로 SQL로 작성하는 코드를 쿼리문(SQL문) 이라 함

Single Table Queries 

SQL Statements 유형 중 DQL(Data Query Language) 데이터 검색의 역할을 함, SQL 키워드 : SELECT

Querying data
SELECT statement : 테이블에서 데이터를 조회 

SLLECT syntax
SELECT
  selecnt_list
FROM
  table_name;
SELECT 키워드 이후 데이터를 선택하려는 필드를 하나 이상 지정, From 키워드 이후 데이터를 선택하려는 테이블의 이름을 지정

Sorting Data
ORDER BY statement : 조회 결과의 레코드를 정렬
ORDER BY syntax
FROM clause(절)  뒤에 위치 
하나 이상의 컬럼을 기준으로 결과를 오름차순(ASC, 기본 값), 내림차순(DESC)으로 정렬 

Filtering data
Filtering data 관련 Keywords
- Clause(절) : DISTINCT, WHERE, LIMIT
- Operator(연산자) : BETWEEN, IN, LIKE, Comparison, Logical   

DISTINCT statement : 조회 결과에서 중복된 레코드를 제거 
DISTINCT syntax : SELECT 키워드 바로 뒤에 작성해야 함, SELECT DISTINCT 키워드 다음에 고유한 값을 선택하려는 하나 이상의 필드를 지정
WHERE statement : 조회 시 특정 검색 조건을 지정, FROM clause 뒤에 위치, search_condition은 비교연산자 및 논리연산자(AND, OR, NOT 등)를 사용하는 구문이 사용됨
WHERE syntax : FROM clause 뒤에 위치, search_condition은 비교연산자 및 논리연산자(ADN, OR, NOT 등)를 사용하는 구문이 사용됨 

Operators
비교연산자, Comparison Operators : =, >=, <=, !=, IS, LIKE, IN, BETWEEN, ... AND
 IN Operator: 값이 특정 목록 안에 있는지 확인
 LIKE Operator : 값이 특정 패턴에 일치하는지 확인(Wildcards와 함께 사용('%', '_') -> '%' : 0개 이상의 문자열과 일치 하는지 확인, '_' : 단일 문자와 일치하는지 확인 
 LIMIT Clause: 조회하는 레코드 수 제한 
 LIMIT syntax : 하나 또는 두 개의 인자를 사용(0또는 양의 정수), row_count는 조회하는 최대 레코드 수를 지정 
논리연산자, Logical Operators : AND, OR, NOT

Grouping data
GROUP BY clause : 레코드를 그룹화하여 요약본 생성('집계함수'와 함께 사용)
Aggregation Functions, 집계 함수 : 값에 대한 계산을 수행하고 단일한 값을 반환하는 함수(SUM, AVG, MAX, MIN, COUNT)
GROUP BY syntax : FROM 및 WHERE 절 뒤에 배치, GROUP BY 절 뒤에 그룹화 할 필드 목록을 작성 

SELECT statement 실행 순서 
FROM -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY -> LIMIT
테이블에서 -> 특정 조건에 맞추어 -> 그룹화 하고 -> 만약 그룹 중에 조건이 있으면 맞추고 -> 조회하여 -> 정렬하고 -> 특정 위치의 값을 가져옴 
























