Authentication System 01

< Cookie & Session >
HTTP의 특징 : 비 연결 지향, 무상태
즉, 서버는 요청에 대한 응답을 보낸 후 연결을 끊고, 끊는 순간 클라이언트와 서버 간의 통신이 끝나며 상태 정보가 유지되지 않음 따라서 상태가 없다는 것은 장바구니에 담은 상품을 유지할 수 없고, 또 로그인 상태를 유지할 수 없음 

쿠키(Cookie) : 서버가 사용자의 웹 브라우저에 전송하는 작은 데이터 조각
쿠키는 사용자 인증, 추적, 상태 유지 등에 사용되는 데이터 저장 방식임
쿠키 동작 예시
브라우저가 웹 서버에 웹 페이지를 요청하면 웹 서버는 요청된 페이지와 함께 쿠키를 포함한 응답을 브라우저에게 전송함, 브라우저는 받은 쿠키를 저장소에 저장한다 이때 쿠키의 속성(만료시간, 도메인, 주소 등)도 함께 저장된다. 이후 브라우저가 같은 웹 서버에 웹 페이지를 요청할 때, 저장된 쿠키 중 해당 요쳥에 적용 가능한 쿠키를 포함하여 함께 전송한다. 웹 서버는 받은 쿠키 정보를 확인하고, 필요에 따라 사용자 식별, 세션 관리 등을 수행한다. 웹 서버는 요청에 대한 응답을 보내며, 필요한 경우 또 새로운 쿠리를 설정하거나 기존 쿠키를 수정할 수 있다. 
장바구니에 담는 것도 쿠기에 대한 예시임
쿠키의 작동 방식 원리와 활용
1. 쿠키 저장 방식
 브라우저(클라이언트)는 쿠키를 키-밸루의 테이터 형식으로 저장함 쿠키에는 이름, 값 외에도 만료 시간, 도메인, 경로 등의 추가 속성이 포함 됨
2. 쿠키 전송 과정
 서버는 hTTP 응답 헤더의 Set-Cookie 필드를 통해 클라이언트에게 쿠키를 전송함 브라우저는 받은 쿠키를 저장해 두었다가, 동일한 서버에 재요청 시 HTTP 요청 Header의 Cookie 필드에 저장된 쿠키를 함께 전송 
3. 쿠키의 주요 용도
 두 요청이 동일한 브라우저에서 들어왔는지 아닌지를 판단할 때 주로 사용되고 이를 이용해 사용자의 로그인 상태를 유지할 수 있다 상태가 없는 HTTP 프로토콜에서 상태 정보를 기억시켜 주는 역할임 즉, 서버에게 '나 로그인된 사용자야 !' 라는 인증 정보가 담긴 쿠키를 매 요청마다 계속 보내는 것임 
쿠키 사용 목적
1. 세션 관리 즉, 로그인, 아이디 자동완성, 공지 하루 안 보기, 팝업 체크, 장바구니 등의 정보관리
2. 개인화 즉, 사용자 선호 설정(언어 설정, 테마 등) 저장
3. 트래킹 즉, 사용자 행동을 기록 및 분석 (광고추천 등)

세션 : 서버 측에서 생성되어 클라이언트와 서버 간의 상태를 유지 상태 정보를 저장하는 데이터 저장 방식 
세션 작동 원리
클라이언트가 로그인 요청 후 인증에 성공하면 서버가 세션데이터를 생성 후 저장한 다음 생성된 세션 데이터에 인증 할 수 있는 session id를 발급함 발급한 세션 아이디를 클라이언트에게 응답(데이터는 서버에 저장, 열쇠만 주는 것) 클라이언트는 응답 받은 세션 아이디를 쿠키에 저장함 클라이언트가 다시 동일한 서버에 접속하면 요청과 함께 쿠키(세션 아이디가 저장된)를 서버에 전달 쿠키는 요청 때마다 서버에 함께 전송 되므로 서버에서 세션 아이드를 확인해 로그인 되어있다는 것을 계속해서 확인하도록 함 
정리하면 서버 측에서는 세션 데이터를 생성 후 저장하고 이 데이터에 접근할 수 있는 세션 아이디를 생성함 이 아이디는 클라이언트 측으로 전달하고, 클라이언트는 쿠키에 이 아이디를 저장한다. 이후 클라이언트가 같은 서버에 재요청 시마다 저장해 두었던 쿠키도 요청과 함께 전송함 결국 로그인 상태 유지를 위해 로그인 되어있따는 사실을 입증하는 데이터를 매 요청마다 계속해서 보내는 것임 
쿠키와 세션의 목적은 클라이언트와 서버 간의 상태 정보를 유지하고 사용자를 식별하기 위해 사용

<Django Authentication System 및 Custom User model 1>
Django Authentication System : 사용자 인증과 관련된 기능을 모아 놓은 시스템
Authentication은 신원을 확인한 것 권한과 다르다.
사전준비
두번째 앱 accounts 생성 및 등록 장고 내부적으로 accounts라는 이름으로 사용하고 있기에 되도록 인증과 관련된 기능은 'accounts'로 하는 것을 권장
Custom User model
기본 User Model의 한계는 지금까지 별도의 User 클래스 정의 없이 내장된 auth 앱에 작성된 User 클래스를 사용했다 장고의 기본 User 모델은 username, password 등 제공되는 필드가 매우 제한적이다 추가적인 사용자 정보(예 : 생년월일, 주소, 나이 등)가 필요하다면 이를 위해 기본 User Model을 변경하기 어렵다 즉 편리하지만, 개발자가 직접 수정하기 어려움 
User Model 대체의 필요성은 프로젝트의 특정 요구사항에 맞춰 사용자 모델을 확장할 수 있음 예를 들어서 이메일을 username으로 사용하거나, 다른 추가 필드를 포함시킬 수 있음 
Custom User Model로 대체하기
AbstractUser 클래스를 상속 받는 커스텀 User 클래스 작성한다 그러면 커스텀 User 클래스가 기존 User 클래스와 완전히 같은 모습을 가지게 됨 장고 프로젝트에서 사용하는 기본 User 모델을 우리가 작성한 User 모델로 사용할 수 있도록 AUTH_USER_MODEL 값을 변경한다(수정 전 기본값은 'auth.User'임, settings.py에서함) amin site에 대체한 User 모델 등록한다 기본 User 모델이 아니기 때문에 등록하지 않으면 admin 페이지에 출력되지 않기 때문(accounts > admin.py에서함)  
AUTH_USER_MODEL : 장고 프로젝트의 User를 나타내는 데 사용하는 모델을 지정하는 속성이다.  **주의 : 프로젝트 중간에 AUTH_USER_MODEL을 변경 할 수 없음, 이미 프로젝트가 진행되고 있을 경우 데이터베이스를 초기화 후 진행
프로젝트를 시작하면 반드시 User 모델을 대체해라 왜냐면 장고는 새 프로젝트를 시작하는 경우 비록 기본 User 모델이 충분할지라도 커스텀 User 모델을 설정하는 것을 강력하게 권장함 커스텀은 기본이랑 동일하게 작동 하면서도 필요한 경우 나중에 맞춤 설정이 가능하기  때문임 단, User 모델 대체 작업은 프로젝트의 모든 migrations 혹은 첫 migrate를 실행하기 전에 이 작업을 마쳐야함 

<Custom User model2 및 Login>
Login : 로그인은 세션을 Create하는 과정
AuthenticationForm() : 로그인 폼, 로그인 인증에 사용할 데이터를 입력 받는 built-in form임 모델 폼이 아님 저장용이 아니기에, 회원가입에서 쓰는 폼은 모델 폼일 것이다.)
Login(request, user)
: AuthenticationForm을 통해 인증된 사용자를 로그인(세션 데이터를 생성) 하는 함수
get_user() : AuthenticationForm의 인스턴스 메서드이고 유효성 검사를 통과했을 경우 로그인 한 사용자 객체를 반환함 

<Logout 및 Template with Authentication data 및 참고>
Logout : Session을 Delete 하는 과정
Logout(request) : DB에서 현재 요청에 대한 Session Data를 삭제하고 클라이언트의 쿠키에서도 Session Id를 삭제함
Template with Authentication data
템플릿과 인증 데이터 : 템플릿에서 인증 관련 데이터를 출력하는 방법 
현재 로그인 되어있는 유저 정보 출력하기
user라는 context 데이터를 사용할 수 있는 이유는 장고가 미리 준비한 context 데이터가 존재하기 때문임(context processors)
context processors는 템플릿이 렌더링 될 때 호출 가능한 컨텍스트 데티터 목록이고 작성된 컨텍스트 데이트는 기본적으로 템플릿에서 사용 가능한 변수로 포함된다 장고에서 자주 사용하는 데이터 목록을 미리 템플릿에 로드 해 둔 것임(settings.py의 TEMPLATES에 가보면 있음)
참고 
쿠키의 수명 
Seesion cookie는 현재 세션이 종료되면 삭제됨, 브라우저 종료와 함께 세션이 삭제됨
Persistent cookies는 Expires 속성에 지정된 날짜 혹은 Max-Age 속성에 지정된 기간이 지나면 삭제됨   
쿠키와 보안
쿠키의 보안 장치는 제한된 정보 쿠키에는 보통 중요하지 않은 정보만 저장(사용자 아이디나 세션 번호 등) 중요한 건 암호화하고 만료시간을 설정하고 시간이 지나면 자동으로 삭제 또 도메인 제한함 쿠키는 특정 웹사이트에서만 사용할 수 있또록 설정할 수 있음 
쿠키와 개인정보 보호
많은 국가에서 쿠키 상숑에 대한 사용자 동의를 요구하는 법규 시행, 웹사이트는 쿠키 정책 명시하고 사용자의 동의를 얻어야 함 
세션 in 장고
장고는 'database-backed seesions' 저장 방식을 기본값, 세션 정보는 DB의 django_session 테이블에 저장함 장고는 우리가 세션 메커니즘(복잡한 동작원리)에 대부분을 생각하지 않게끔 많은 도움을 줌 
AuthenticationForm 내부 코드 
장고 깃헙 코드 참고 ~ 
AbstractUser class : 관리자 권한과 함께 완전한 기능을 가지고 있는 User model을 구현하는 추상 기본클래스 추상 기본 클래스는 몇가지 공통 정보를 여러 다른 모델에 넣을 때 사용하는 클래스이다. 이것을 테이블을 만드는 데는 사용되지 않고 대신 다른 모델의 기본 클래스로 상숑되는 경우 해당 필드가 하위 클래스의 필드에 추가됨 
User 모델 대체하기 Tip
User 모델을 대체하는 순서를 숙지하기 어려울 경우 해당 공식문서를 보며 순서대로 진행하는 것을 권장 




 
 

